# ## BEGIN: Code to profile zsh startup (sibling code exists at the end of this file)
# zmodload zsh/datetime
# setopt PROMPT_SUBST
# PS4='+$EPOCHREALTIME %N:%i> '

# logfile=$(mktemp zsh_profile.XXXXXXXX)
# echo "Logging to $logfile"
# exec 3>&2 2>$logfile

# setopt XTRACE
# ## END: Code to profile zsh startup

# ML: 2018-09-07; 2019-06-29: move to ~/.zsh
if [ -d ${HOME}/.zsh ]; then
    DOT_ZSH=${HOME}/.zsh
else
    echo "${HOME}/.zsh directory doesn't exist. WTF?" 1>&2
    echo "*** good luck making the rest of this .zshrc work ***" 1>&2
fi

if [ -n "${DOT_ZSH}/systeminfo.sh" ]; then
    # Set OS, DIST, DistroBasedOn, PSEUDONAME, REV, KERNEL, MACH where available
    source ${DOT_ZSH}/systeminfo.sh
else
    KERNEL="$(uname -r)"
    MACH="$(uname -m)"

    case "$OSTYPE" in
        darwin*)
            OS="darwin"
            ;;

        linux*)
            OS="linux"
            ;;

        *)
            OS="** UNKNOWN **"
            ;;
    esac

    declare -xlr KERNEL MACH OS
fi

export EDITOR="vim"

# Display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Set the command execution time stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# reduce key timeout to make switching between VI modes more fluid
KEYTIMEOUT=10

# Load additional zsh modules
zsh_modules=(
    system
)

for module in $zsh_modules
do
    zmodload "zsh/${module}"
done

# Prefer HOMEBREW_PREFIX from `brew shellenv`; fall back to querying brew
BREW_PREFIX="${HOMEBREW_PREFIX:-$(${commands[brew]} --prefix 2>/dev/null)}"

# Setup theme
if (( $+commands[starship] )); then
    USE_STARSHIP="true"
else
    PROMPT='%{$fg[magenta]%}[%{$fg[cyan]%}%m:%{$fg[magenta]%}$(shrink_path -f)] %{$reset_color%}'
fi

source_before_antidote=(
    # NOTE: order matters here
    paths.zsh
    plugins_builder.zsh
)

for file in "${source_before_antidote[@]}"
do
    source "${DOT_ZSH}/${file}"
done

case "$OS" in
    darwin)
        if ! ssh-add -l >/dev/null 2>&1; then
            ssh-add --apple-load-keychain
        fi
        ;;
esac

#
# iTerm configuration
#
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

iterm2_print_user_vars() {
    iterm2_set_user_var shortHostname $(hostname -s)
    (( $+commands[tmux] )) && iterm2_set_user_var tmuxWinIDX $(tmux_winidx_circled)
}

# additional zsh completions installed with brew
if [ -d "${BREW_PREFIX}/share/zsh-completions" ]
then
    fpath+=${BREW_PREFIX}/share/zsh-completions
fi

# Initialize completion before sourcing plugins (needed for plugins that call compdef)
autoload -Uz compinit && compinit -i

# Make completion case-insensitive
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# Antidote (lightweight plugin manager)
if [ -r "$HOME/.antidote/antidote.zsh" ]; then
    source "$HOME/.antidote/antidote.zsh"
    # Only (re)bundle if the list exists and is newer than the bundle (or bundle missing)
    if [ -r "$HOME/.zsh_plugins.txt" ]; then
        if [ ! -r "$HOME/.zsh_plugins.sh" ] || [ "$HOME/.zsh_plugins.txt" -nt "$HOME/.zsh_plugins.sh" ]; then
            antidote bundle < "$HOME/.zsh_plugins.txt" > "$HOME/.zsh_plugins.sh"
        fi
    fi
    # Load compiled plugin bundle if present
    [ -r "$HOME/.zsh_plugins.sh" ] && source "$HOME/.zsh_plugins.sh"
fi

######## Antidote plugins are sourced above here #######
#
# ML: 2019-06-29
source_after_antidote=(
    # NOTE: order matters here
    aliases.zsh
    variables.zsh
)

for file in "${source_after_antidote[@]}"
do
    source "${DOT_ZSH}/${file}"
done

(( $+commands[direnv] )) && eval "$(direnv hook zsh)"
(( $+commands[ngrok] )) && eval "$(ngrok completion)"
(( $+commands[rg] )) && typeset -xr RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

# --- Local plugins: auto-load every *.zsh in ${DOT_ZSH}/plugins ---
# Disable errors if no files match; only source readable files.
# Disable individual plugins by changing the extension from .zsh
setopt null_glob
for _plug in "${DOT_ZSH}"/plugins/*.zsh; do
  [[ -r "$_plug" ]] && source "$_plug"
done
unsetopt null_glob
unset _plug

(( $+commands[zoxide] )) && eval "$(zoxide init --cmd z zsh)" # must come after compinit and after plugins are sourced

# pipx autocompletion must come after the above compinit. No idea why
(( $+commands[pipx] )) && eval "$(register-python-argcomplete pipx)"

# paths.zsh defines the function below
(( $+functions[remove_duplicate_paths] )) && remove_duplicate_paths

if [[ -n "${USE_STARSHIP}" ]]; then
    unset USE_STARSHIP
    eval "$(starship init zsh)"
fi

# If zsh-autosuggestions is installed, exclude certain matches
[[ -n "$ZSH_AUTOSUGGEST_STRATEGY" ]] && ZSH_AUTOSUGGEST_HISTORY_IGNORE="gcmsg*"


# ## BEGIN: Code to profile zsh startup (sibling code exists at the top of this file)
# unsetopt XTRACE
# exec 2>&3 3>&-
# ## END: Code to profile zsh startup

# Created by `pipx` on 2025-09-18 00:55:37
export PATH="$PATH:/Users/matt/.local/bin"

# vim:ft=zsh
