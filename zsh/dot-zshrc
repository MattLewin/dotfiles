# ## BEGIN: Code to profile zsh startup (sibling code exists at the end of this file)
# zmodload zsh/datetime
# setopt PROMPT_SUBST
# PS4='+$EPOCHREALTIME %N:%i> '

# logfile=$(mktemp zsh_profile.XXXXXXXX)
# echo "Logging to $logfile"
# exec 3>&2 2>$logfile

# setopt XTRACE
# ## END: Code to profile zsh startup

# ML: 2018-09-07; 2019-06-29: move to ~/.zsh
if [ -d ${HOME}/.zsh ]; then
    DOT_ZSH=${HOME}/.zsh
else
    echo "${HOME}/.zsh directory doesn't exist. WTF?" 1>&2
    echo "*** good luck making the rest of this .zshrc work ***" 1>&2
fi

if [ -n "${DOT_ZSH}/systeminfo.sh" ]; then
    # Set OS, DIST, DistroBasedOn, PSEUDONAME, REV, KERNEL, MACH where available
    source ${DOT_ZSH}/systeminfo.sh
else
    KERNEL="$(uname -r)"
    MACH="$(uname -m)"

    case "$OSTYPE" in
        darwin*)
            OS="darwin"
            ;;

        linux*)
            OS="linux"
            ;;

        *)
            OS="** UNKNOWN **"
            ;;
    esac

    declare -xlr KERNEL MACH OS
fi

export ZSH=$HOME/.oh-my-zsh
export EDITOR="vim"

# Display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Set the command execution time stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM="${HOME}/src/dotfiles/oh-my-zsh/custom"

# reduce key timeout to make switching between VI modes more fluid
KEYTIMEOUT=10

# Load additional zsh modules
zsh_modules=(
    system
)

for module in $zsh_modules
do
    zmodload "zsh/${module}"
done

test "${commands[brew]}" && BREW_PREFIX="$(${commands[brew]} --prefix)"

# Setup theme
if (( $+commands[starship] )); then
    USE_STARSHIP="true"
elif [ -e "${ZSH_CUSTOM:-${ZSH}/custom}/themes/spaceship.zsh-theme" ]; then
    ZSH_THEME="spaceship"  # https://github.com/spaceship-prompt/spaceship-prompt
    SPACESHIP_DIR_TRUNC_REPO=false
    SPACESHIP_VI_MODE_COLOR=none   # ensure the vi mode indicator is visible
    export RPS1="%{$reset_color%}" # suppress '<<<' from vi-mode plugin
else
    ZSH_THEME="theunraveler"
    PROMPT='%{$fg[magenta]%}[%{$fg[cyan]%}%m:%{$fg[magenta]%}$(shrink_path -f)] %{$reset_color%}'
fi

source_before_omz=(
    # NOTE: order matters here
    paths.zsh
    plugins.zsh
)

for file in "${source_before_omz[@]}"
do
    source "${DOT_ZSH}/${file}"
done

#
# iTerm configuration
#
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

iterm2_print_user_vars() {
    iterm2_set_user_var shortHostname $(hostname -s)
    [ ${commands[tmux]} ] && iterm2_set_user_var tmuxWinIDX $(tmux_winidx_circled)
}

# added by travis gem
[ -f ${HOME}/.travis/travis.sh ] && source ${HOME}/.travis/travis.sh

#
# Google Cloud SDK configuration
#
if [ -d "${BREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/" ]; then
    source "${BREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"
    source "${BREW_PREFIX}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
fi

# conda initialize
if [ -d "${BREW_PREFIX}/anaconda3/" ]; then
    CONDA_PREFIX="${BREW_PREFIX}/anaconda3"
    function conda_init() {
        __conda_setup="$('${CONDA_PREFIX}/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        else
            if [ -f "${CONDA_PREFIX}/etc/profile.d/conda.sh" ]; then
                . "${CONDA_PREFIX}/etc/profile.d/conda.sh"
            elif [ -d "${CONDA_PREFIX}/bin" ]; then
                export PATH="${CONDA_PREFIX}/bin:$PATH"
            fi
        fi
        unset __conda_setup
        unfunction conda_init
    }

    # I was lazy loading conda, but it's annoying with direnv and my shell is slow to load anyway, so...
    conda_init
fi

# additional zsh completions installed with brew
if [ -d "${BREW_PREFIX}/share/zsh-completions" ]
then
    fpath+=${BREW_PREFIX}/share/zsh-completions
fi

source $ZSH/oh-my-zsh.sh

######## source oh-my-zsh above here #######
#
# ML: 2019-06-29
source_after_omz=(
    # NOTE: order matters here
    aliases.zsh
    variables.zsh
)

for file in "${source_after_omz[@]}"
do
    source "${DOT_ZSH}/${file}"
done

# ML: 2019-06-29: use homebrew-file
if ( [ ${commands[brew]} ] ) && [ -f ${BREW_PREFIX}/etc/brew-wrap ];then
  source ${BREW_PREFIX}/etc/brew-wrap
fi

[ ${commands[direnv]} ] && eval "$(direnv hook zsh)"
[ ${commands[ngrok]} ] && eval "$(ngrok completion)"

# paths.zsh defines the function below
[ ${functions[remove_duplicate_paths]} ] && remove_duplicate_paths

if ${USE_STARSHIP}; then
    unset USE_STARSHIP
    eval "$(starship init zsh)"
fi

# include zsh extensions installed as brew packages
homebrew_extensions=(
    zsh-autosuggestions
    zsh-syntax-highlighting # I believe this must be last so that it can properly highlight all completions
)

for homebrew_extension in "${homebrew_extensions[@]}"
do
    if [ -d "${BREW_PREFIX}/share/${homebrew_extension}" ]
    then
        source "${BREW_PREFIX}/share/${homebrew_extension}/${homebrew_extension}.zsh"
    fi
done

# If zsh-autosuggestions is installed, exclude certain matches
[[ -n "$ZSH_AUTOSUGGEST_STRATEGY" ]] && ZSH_AUTOSUGGEST_HISTORY_IGNORE="gcmsg*"

# compinit executed by oh-my-zsh doesn't work for some janky plugins, so we do it again at the very
# end of the rc file
autoload -Uz compinit && compinit

# ## BEGIN: Code to profile zsh startup (sibling code exists at the top of this file)
# unsetopt XTRACE
# exec 2>&3 3>&-
# ## END: Code to profile zsh startup

# vim:ft=zsh
