# plugins_builder.zsh — dynamic Antidote plugin builder

_build_plugins() {
  local dest="$HOME/.zsh_plugins.txt"
  local tmp
  tmp="$(mktemp)"

  # Always-on (highlighting forced last)
  local HIGHLIGHT_LAST="zsh-users/zsh-syntax-highlighting"
  local -a ALWAYS_ON=(
    ajeetdsouza/zoxide
    zsh-users/zsh-autosuggestions
    zsh-users/zsh-completions
    'ohmyzsh/ohmyzsh path:plugins/git'
    'ohmyzsh/ohmyzsh path:plugins/copypath'
    'ohmyzsh/ohmyzsh path:plugins/dotenv'
    'ohmyzsh/ohmyzsh path:plugins/iterm2'
    'ohmyzsh/ohmyzsh path:plugins/shrink-path'
  )

  # Binary-gated plugins
  typeset -A WANT=(
    [aws]=aws
    [docker]=docker
    [grc]=grc
  )

  # Associated mappings
  typeset -A MAP=(
    [terminal-notifier]=bgnotify
  )

  # Helper to emit an OMZ plugin line
  local add_omz
  add_omz() { print -r -- "ohmyzsh/ohmyzsh path:plugins/$1" >> "$tmp"; }

  # Header (informational)
  print -r -- "# Auto-generated by plugins_builder.zsh on $(date)" > "$tmp"

  # Always-on first
  local p
  for p in "${ALWAYS_ON[@]}"; do
    print -r -- "$p" >> "$tmp"
  done

  # Then conditionals when their commands exist
  local k cmd
  for k cmd in "${(@kv)WANT}"; do
    (( $+commands[$cmd] )) && add_omz "$k"
  done

  # Associated mappings (binary → plugin)
  local from to
  for from to in "${(@kv)MAP}"; do
    (( $+commands[$from] )) && add_omz "$to"
  done

  # Ensure syntax highlighting is sourced last
  print -r -- "$HIGHLIGHT_LAST" >> "$tmp"

  # Write only if changed
  if [[ ! -e "$dest" ]] || ! cmp -s "$tmp" "$dest"; then
    mv "$tmp" "$dest"
  else
    rm -f "$tmp"
  fi
}

_build_plugins
